// == Media queries breakpoints
//
// ## Define the breakpoints at which your layout will change, adapting to different screen sizes.

// Extra small screen / phone
// ** Deprecated `$screen-xs` as of v3.0.1
$screen-xs ?=                480px
// ** Deprecated `$screen-xs-min` as of v3.2.0
$screen-xs-min ?=            $screen-xs
// ** Deprecated `$screen-phone` as of v3.0.1
$screen-phone ?=             $screen-xs-min

// Small screen / tablet
// ** Deprecated `$screen-sm` as of v3.0.1
$screen-sm ?=                768px
$screen-sm-min ?=            $screen-sm
// ** Deprecated `$screen-tablet` as of v3.0.1
$screen-tablet ?=            $screen-sm-min

// Medium screen / desktop
// ** Deprecated `$screen-md` as of v3.0.1
$screen-md ?=                992px
$screen-md-min ?=            $screen-md
// ** Deprecated `$screen-desktop` as of v3.0.1
$screen-desktop ?=           $screen-md-min

// Large screen / wide desktop
// ** Deprecated `$screen-lg` as of v3.0.1
$screen-lg ?=                1200px
$screen-lg-min ?=            $screen-lg
// ** Deprecated `$screen-lg-desktop` as of v3.0.1
$screen-lg-desktop ?=        $screen-lg-min

// So media queries don't overlap when required, provide a maximum
$screen-xs-max ?=            ($screen-sm-min - 1)
$screen-sm-max ?=            ($screen-md-min - 1)
$screen-md-max ?=            ($screen-lg-min - 1)


// == Grid system
//
// ## Define your custom responsive grid.

// ** Number of columns in the grid.
$grid-columns ?=              12
// ** Padding between columns. Gets divided in half for the left and right.
$grid-gutter-width ?=         32px
// Navbar collapse
// ** Point at which the navbar becomes uncollapsed.
$grid-float-breakpoint ?=     $screen-sm-min
// ** Point at which the navbar begins collapsing.
$grid-float-breakpoint-max ?= ($grid-float-breakpoint - 1)


// == Container sizes
//
// ## Define the maximum width of `.container` for different screen sizes.

// Small screen / tablet
$container-tablet ?=           (720px + $grid-gutter-width)
// ** For `$screen-sm-min` and up.
$container-sm ?=               $container-tablet

// Medium screen / desktop
$container-desktop ?=          (940px + $grid-gutter-width)
// ** For `$screen-md-min` and up.
$container-md ?=               $container-desktop

// Large screen / wide desktop
$container-large-desktop ?=    (1000px + $grid-gutter-width)
// ** For `$screen-lg-min` and up.
$container-lg ?=               $container-large-desktop

//
// Grid system
// --------------------------------------------------
$half-gutter = ($grid-gutter-width / 2)

// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

.container
  container-fixed()

  @media (min-width $screen-sm-min)
    max-width: $container-sm
  @media (min-width $screen-md-min)
    max-width: $container-md
  @media (min-width $screen-lg-min)
    max-width: $container-lg


// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

.container-fluid
  container-fixed()


// Row
//
// Rows contain and clear the floats of your columns.

.row
  make-row()

// Columns
//
// Common styles for small and large grid columns

make-grid-columns()

// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

make-grid(xs)

// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width $screen-sm-min)
  make-grid(sm)


// Medium grid
//
// Columns, offsets, pushes, and pulls for the medium device range, from tablets
// to desktops.

@media (min-width $screen-md-min)
  make-grid(md)

// Large grid
//
// Columns, offsets, pushes, and pulls for the large device range, from desktops
// to wide desktops

@media (min-width $screen-lg-min)
  make-grid(lg)


.no-gutter > [class*='col-']
  padding: 0

@media (max-width $screen-xs-max)
  .no-gutter-xs > [class*='col-']
    padding: 0

.no-gutter-left
  padding-left: 0

.no-gutter-right
  padding-right: 0


// Half a gutter between columns-xs-6
// for extra small and small sizes
// TODO: Is this the best way?

@media (max-width $screen-xs-max)
  .quarter-gutter-xs-left
    padding-left: ($grid-gutter-width / 4)

  .quarter-gutter-xs-right
    padding-right: ($grid-gutter-width / 4)


// Bootstrap grid clearfix
// Clearing higher columns
// Only for same size grid items inside the row__grid
//
clear-row($clear, $size)
  .col-{$size}-2:nth-child(6n+1),
  .col-{$size}-3:nth-child(4n+1),
  .col-{$size}-4:nth-child(3n+1),
  .col-{$size}-6:nth-child(2n+1)
    clear: $clear

clear-not-row($size)
  .col-{$size}-2:not(:nth-child(6n+1)),
  .col-{$size}-3:not(:nth-child(4n+1)),
  .col-{$size}-4:not(:nth-child(3n+1)),
  .col-{$size}-6:not(:nth-child(2n+1))
    clear: none

.row__grid
  clear-row(left, 'xs')

  @media (min-width $screen-sm-min)
    clear-not-row('sm')
    clear-row(left, 'sm')

  @media (min-width $screen-md-min)
    clear-not-row('md')
    clear-row(left, 'md')
